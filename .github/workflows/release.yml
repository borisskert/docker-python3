name: Docker Image CI

on:
  push:
    branches: [ master ]
  schedule:
    - cron: '0 4 * * *'

jobs:
  build-ubuntu-debian-image:
    runs-on: ubuntu-latest
    continue-on-error: true

    strategy:
      matrix:
        include:
          - distribution: ubuntu
            release: focal
            platforms: |
              linux/amd64
              linux/arm/v7
              linux/arm64
          - distribution: ubuntu
            release: bionic
            platforms: |
              linux/386
              linux/amd64
              linux/arm/v7
              linux/arm64/v8
          - distribution: ubuntu
            release: xenial
            platforms: |
              linux/386
              linux/amd64
              linux/arm/v7
              linux/arm64/v8

          - distribution: debian
            release: buster
            platforms: |
              linux/386
              linux/amd64
              linux/arm/v7
              linux/arm64/v8
          - distribution: debian
            release: stretch
            platforms: |
              linux/386
              linux/amd64
              linux/arm/v7
              linux/arm64/v8
          - distribution: debian
            release: buster
            platforms: |
              linux/386
              linux/amd64
              linux/arm/v7
              linux/arm64/v8
          - distribution: debian
            release: jessie
            platforms: |
              linux/386
              linux/amd64
              linux/arm/v7

    steps:
      - uses: actions/checkout@v2

      - name: Set up environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.distribution }}-${{ matrix.release }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-${{ matrix.distribution }}-${{ matrix.release }}-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.distribution }}/${{ matrix.release }}
          platforms: ${{ matrix.platforms }}
          push: true
          tags: borisskert/python3:${{ matrix.release }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  build-centos-image:
    runs-on: ubuntu-latest
    continue-on-error: true

    strategy:
      matrix:
        include:
          - distribution: centos
            release: 8
            python: 38
            platforms: |
              linux/amd64
              linux/arm64/v8
          - distribution: centos
            release: 7
            python: 36
            platforms: |
              linux/386
              linux/amd64
              linux/arm/v7
              linux/arm64/v8

    steps:
      - uses: actions/checkout@v2

      - name: Set up environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.distribution }}-${{ matrix.release }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-${{ matrix.distribution }}-${{ matrix.release }}-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.distribution }}
          platforms: ${{ matrix.platforms }}
          build-args: |
            CENTOS_RELEASE=${{ matrix.release }}
            PYTHON_VERSION=${{ matrix.python }}
            ARCHITECTURE=${{ matrix.platforms }}
          push: true
          tags: borisskert/python3:${{ matrix.distribution }}${{ matrix.release }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  build-openwrt-image:
    runs-on: ubuntu-latest
    continue-on-error: true

    strategy:
      matrix:
        include:
          - release: 19.07.6
            platforms: |
              linux/amd64

    steps:
      - uses: actions/checkout@v2

      - name: Set up environment
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-openwrt-${{ matrix.release }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-openwrt-${{ matrix.release }}-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: openwrt
          platforms: ${{ matrix.platforms }}
          build-args: |
            OPENWRT_RELEASE=${{ matrix.release }}
          push: true
          tags: borisskert/python3:openwrt
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
